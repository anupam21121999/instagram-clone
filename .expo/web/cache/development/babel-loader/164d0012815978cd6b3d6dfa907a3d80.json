{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useSyncState;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar UNINTIALIZED_STATE = {};\nfunction useSyncState(initialState) {\n  var stateRef = React.useRef(UNINTIALIZED_STATE);\n  var isSchedulingRef = React.useRef(false);\n  var isMountedRef = React.useRef(true);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = typeof initialState === 'function' ? initialState() : initialState;\n  }\n  var _React$useState = React.useState(stateRef.current),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    trackingState = _React$useState2[0],\n    setTrackingState = _React$useState2[1];\n  var getState = React.useCallback(function () {\n    return stateRef.current;\n  }, []);\n  var setState = React.useCallback(function (state) {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n    stateRef.current = state;\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  var scheduleUpdate = React.useCallback(function (callback) {\n    isSchedulingRef.current = true;\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  var flushUpdates = React.useCallback(function () {\n    if (!isMountedRef.current) {\n      return;\n    }\n    setTrackingState(stateRef.current);\n  }, []);\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n  var state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"sources":["useSyncState.tsx"],"names":["UNINTIALIZED_STATE","useSyncState","initialState","stateRef","React","useRef","isSchedulingRef","isMountedRef","useEffect","current","trackingState","setTrackingState","useState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates","useDebugValue"],"mappings":";;;;;;AAAA;AAA8B;AAAA;AAE9B,IAAMA,kBAAkB,GAAG,CAAC,CAAC;AAKd,SAASC,YAAY,CAAIC,YAA4B,EAAE;EACpE,IAAMC,QAAQ,GAAGC,KAAK,CAACC,MAAM,CAAIL,kBAAkB,CAAQ;EAC3D,IAAMM,eAAe,GAAGF,KAAK,CAACC,MAAM,CAAC,KAAK,CAAC;EAC3C,IAAME,YAAY,GAAGH,KAAK,CAACC,MAAM,CAAC,IAAI,CAAC;EAEvCD,KAAK,CAACI,SAAS,CAAC,YAAM;IACpBD,YAAY,CAACE,OAAO,GAAG,IAAI;IAE3B,OAAO,YAAM;MACXF,YAAY,CAACE,OAAO,GAAG,KAAK;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIN,QAAQ,CAACM,OAAO,KAAKT,kBAAkB,EAAE;IAC3CG,QAAQ,CAACM,OAAO,GAEd,OAAOP,YAAY,KAAK,UAAU,GAAGA,YAAY,EAAE,GAAGA,YAAY;EACtE;EAEA,sBAA0CE,KAAK,CAACQ,QAAQ,CAACT,QAAQ,CAACM,OAAO,CAAC;IAAA;IAAnEC,aAAa;IAAEC,gBAAgB;EAEtC,IAAME,QAAQ,GAAGT,KAAK,CAACU,WAAW,CAAC;IAAA,OAAMX,QAAQ,CAACM,OAAO;EAAA,GAAE,EAAE,CAAC;EAE9D,IAAMM,QAAQ,GAAGX,KAAK,CAACU,WAAW,CAAEE,UAAAA,KAAQ,EAAK;IAC/C,IAAIA,KAAK,KAAKb,QAAQ,CAACM,OAAO,IAAI,CAACF,YAAY,CAACE,OAAO,EAAE;MACvD;IACF;IAEAN,QAAQ,CAACM,OAAO,GAAGO,KAAK;IAExB,IAAI,CAACV,eAAe,CAACG,OAAO,EAAE;MAC5BE,gBAAgB,CAACK,KAAK,CAAC;IACzB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,cAAc,GAAGb,KAAK,CAACU,WAAW,CAAEI,UAAAA,QAAoB,EAAK;IACjEZ,eAAe,CAACG,OAAO,GAAG,IAAI;IAE9B,IAAI;MACFS,QAAQ,EAAE;IACZ,CAAC,SAAS;MACRZ,eAAe,CAACG,OAAO,GAAG,KAAK;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMU,YAAY,GAAGf,KAAK,CAACU,WAAW,CAAC,YAAM;IAC3C,IAAI,CAACP,YAAY,CAACE,OAAO,EAAE;MACzB;IACF;IAIAE,gBAAgB,CAACR,QAAQ,CAACM,OAAO,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;EAIN,IAAIC,aAAa,KAAKP,QAAQ,CAACM,OAAO,EAAE;IACtCE,gBAAgB,CAACR,QAAQ,CAACM,OAAO,CAAC;EACpC;EAEA,IAAMO,KAAK,GAAGb,QAAQ,CAACM,OAAO;EAE9BL,KAAK,CAACgB,aAAa,CAACJ,KAAK,CAAC;EAE1B,OAAO,CAACA,KAAK,EAAEH,QAAQ,EAAEE,QAAQ,EAAEE,cAAc,EAAEE,YAAY,CAAC;AAClE","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState(initialState) {\n  const stateRef = React.useRef(UNINTIALIZED_STATE);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n    // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n    typeof initialState === 'function' ? initialState() : initialState;\n  }\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n  const getState = React.useCallback(() => stateRef.current, []);\n  const setState = React.useCallback(state => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n    stateRef.current = state;\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  const scheduleUpdate = React.useCallback(callback => {\n    isSchedulingRef.current = true;\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n  const state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}\n//# sourceMappingURL=useSyncState.js.map"]},"metadata":{},"sourceType":"script"}