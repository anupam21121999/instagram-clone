{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationBuilder;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _routers = require(\"@react-navigation/routers\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactIs = require(\"react-is\");\nvar _Group = _interopRequireDefault(require(\"./Group\"));\nvar _isArrayEqual = _interopRequireDefault(require(\"./isArrayEqual\"));\nvar _isRecordEqual = _interopRequireDefault(require(\"./isRecordEqual\"));\nvar _NavigationHelpersContext = _interopRequireDefault(require(\"./NavigationHelpersContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\nvar _PreventRemoveProvider = _interopRequireDefault(require(\"./PreventRemoveProvider\"));\nvar _Screen = _interopRequireDefault(require(\"./Screen\"));\nvar _types = require(\"./types\");\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\nvar _useComponent = _interopRequireDefault(require(\"./useComponent\"));\nvar _useCurrentRender = _interopRequireDefault(require(\"./useCurrentRender\"));\nvar _useDescriptors = _interopRequireDefault(require(\"./useDescriptors\"));\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\nvar _useFocusedListenersChildrenAdapter = _interopRequireDefault(require(\"./useFocusedListenersChildrenAdapter\"));\nvar _useFocusEvents = _interopRequireDefault(require(\"./useFocusEvents\"));\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\nvar _useNavigationHelpers = _interopRequireDefault(require(\"./useNavigationHelpers\"));\nvar _useOnAction = _interopRequireDefault(require(\"./useOnAction\"));\nvar _useOnGetState = _interopRequireDefault(require(\"./useOnGetState\"));\nvar _useOnRouteFocus = _interopRequireDefault(require(\"./useOnRouteFocus\"));\nvar _useRegisterNavigator = _interopRequireDefault(require(\"./useRegisterNavigator\"));\nvar _useScheduleUpdate = _interopRequireDefault(require(\"./useScheduleUpdate\"));\nvar _excluded = [\"children\", \"screenListeners\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n_types.PrivateValueStore;\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === _Screen.default) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the screen '\" + child.props.name + \"'. It must be a non-empty string or 'undefined'.\");\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === _Group.default) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the group. It must be a non-empty string or 'undefined'.\");\n        }\n        acc.push.apply(acc, (0, _toConsumableArray2.default)(getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== _Group.default ? groupOptions : groupOptions != null ? [].concat((0, _toConsumableArray2.default)(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n        name = _config$props.name,\n        children = _config$props.children,\n        component = _config$props.component,\n        getComponent = _config$props.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\"Got a component with the name '\" + component.name + \"' for the screen '\" + name + \"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");\n          }\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n  return configs;\n};\nfunction useNavigationBuilder(createRouter, options) {\n  var navigatorKey = (0, _useRegisterNavigator.default)();\n  var route = React.useContext(_NavigationRouteContext.default);\n  var children = options.children,\n    screenListeners = options.screenListeners,\n    rest = (0, _objectWithoutProperties2.default)(options, _excluded);\n  var _React$useRef = React.useRef(createRouter(Object.assign({}, rest, route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null))),\n    router = _React$useRef.current;\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config.props.name + \"')\");\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key != null ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return Object.assign(acc, (0, _defineProperty2.default)({}, curr, screens[curr].props.getId));\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(_NavigationStateContext.default),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setCurrentState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  }, [setCurrentState]);\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4;\n      var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n        var _route$params, _route$params2, _route$params3;\n        var initialParams = screens[curr].props.initialParams;\n        var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? Object.assign({}, initialParams, initialParamsFromParams) : undefined;\n        return acc;\n      }, {});\n      if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), true];\n      } else {\n        var _ref;\n        var _route$params5;\n        return [router.getRehydratedState((_ref = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) != null ? _ref : currentState, {\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!(0, _isArrayEqual.default)(state.routeNames, routeNames) || !(0, _isRecordEqual.default)(routeKeyList, previousRouteKeyList)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = _routers.CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = _routers.CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  (0, _useScheduleUpdate.default)(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = (0, _useEventEmitter.default)(function (e) {\n    var _ref2;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, (0, _toConsumableArray2.default)(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)([screenListeners].concat((0, _toConsumableArray2.default)(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  (0, _useFocusEvents.default)({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n    childListeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var onAction = (0, _useOnAction.default)({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = (0, _useOnRouteFocus.default)({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = (0, _useNavigationHelpers.default)({\n    id: options.id,\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  (0, _useFocusedListenersChildrenAdapter.default)({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  (0, _useOnGetState.default)({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = (0, _useDescriptors.default)({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  (0, _useCurrentRender.default)({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = (0, _useComponent.default)(function (children) {\n    return React.createElement(_NavigationHelpersContext.default.Provider, {\n      value: navigation\n    }, React.createElement(_PreventRemoveProvider.default, null, children));\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","React","Children","toArray","reduce","acc","child","isValidElement","type","Screen","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","Group","screenOptions","String","process","env","NODE_ENV","forEach","config","component","getComponent","isValidElementType","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","useRegisterNavigator","route","useContext","NavigationRouteContext","screenListeners","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","NavigationStateContext","stateCleanedUp","cleanUpState","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","isArrayEqual","isRecordEqual","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","CommonActions","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","useScheduleUpdate","setTimeout","initializedStateRef","emitter","useEventEmitter","e","target","routes","find","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","useFocusEvents","emit","data","childListeners","addListener","useChildListeners","keyedListeners","addKeyedListener","useKeyedChildListeners","onAction","useOnAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","id","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","useDescriptors","defaultScreenOptions","useCurrentRender","NavigationContent","useComponent"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport { PrivateValueStore } from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\nconst isValidKey = key => key === undefined || typeof key === 'string' && key !== '';\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = (children, groupKey, groupOptions) => {\n  const configs = React.Children.toArray(children).reduce((acc, child) => {\n    var _child$type, _child$props;\n    if ( /*#__PURE__*/React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(...getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [...groupOptions, child.props.screenOptions] : [child.props.screenOptions]));\n        return acc;\n      }\n    }\n    throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${/*#__PURE__*/React.isValidElement(child) ? `'${typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name}'${(_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? ` for the screen '${child.props.name}'` : ''}` : typeof child === 'object' ? JSON.stringify(child) : `'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const {\n        name,\n        children,\n        component,\n        getComponent\n      } = config.props;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);\n        }\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);\n          }\n        }\n      } else {\n        throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);\n      }\n    });\n  }\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder(createRouter, options) {\n  const navigatorKey = useRegisterNavigator();\n  const route = React.useContext(NavigationRouteContext);\n  const {\n    children,\n    screenListeners,\n    ...rest\n  } = options;\n  const {\n    current: router\n  } = React.useRef(createRouter({\n    ...rest,\n    ...(route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null)\n  }));\n  const routeConfigs = getRouteConfigsFromChildren(children);\n  const screens = routeConfigs.reduce((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  const routeNames = routeConfigs.map(config => config.props.name);\n  const routeKeyList = routeNames.reduce((acc, curr) => {\n    acc[curr] = screens[curr].keys.map(key => key ?? '').join(':');\n    return acc;\n  }, {});\n  const routeParamList = routeNames.reduce((acc, curr) => {\n    const {\n      initialParams\n    } = screens[curr].props;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  const routeGetIdList = routeNames.reduce((acc, curr) => Object.assign(acc, {\n    [curr]: screens[curr].props.getId\n  }), {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  const isStateValid = React.useCallback(state => state.type === undefined || state.type === router.type, [router.type]);\n  const isStateInitialized = React.useCallback(state => state !== undefined && state.stale === false && isStateValid(state), [isStateValid]);\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial\n  } = React.useContext(NavigationStateContext);\n  const stateCleanedUp = React.useRef(false);\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  const setState = React.useCallback(state => {\n    if (stateCleanedUp.current) {\n      // State might have been already cleaned up due to unmount\n      // We do not want to expose API allowing to override this\n      // This would lead to old data preservation on main navigator unmount\n      return;\n    }\n    setCurrentState(state);\n  }, [setCurrentState]);\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    var _route$params4;\n    const initialRouteParamList = routeNames.reduce((acc, curr) => {\n      var _route$params, _route$params2, _route$params3;\n      const {\n        initialParams\n      } = screens[curr].props;\n      const initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? {\n        ...initialParams,\n        ...initialParamsFromParams\n      } : undefined;\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), true];\n    } else {\n      var _route$params5;\n      return [router.getRehydratedState((route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) ?? currentState, {\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), false];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n  let state =\n  // If the state isn't initialized, or stale, use the state we initialized instead\n  // The state won't update until there's a change needed in the state we have initalized locally\n  // So it'll be `undefined` or stale until the first navigation event happens\n  isStateInitialized(currentState) ? currentState : initializedState;\n  let nextState = state;\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(name => previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name])\n    });\n  }\n  const previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route !== null && route !== void 0 && route.params) {\n    const previousParams = previousNestedParamsRef.current;\n    let action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : nextState;\n  }\n  const shouldUpdate = state !== nextState;\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n  React.useEffect(() => {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  const getState = React.useCallback(() => {\n    const currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  const emitter = useEventEmitter(e => {\n    let routeNames = [];\n    let route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(route => route.key === e.target);\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(...Object.keys(screens).filter(name => {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      }));\n    }\n    if (route == null) {\n      return;\n    }\n    const navigation = descriptors[route.key].navigation;\n    const listeners = [].concat(\n    // Get an array of listeners for all screens + common listeners on navigator\n    ...[screenListeners, ...routeNames.map(name => {\n      const {\n        listeners\n      } = screens[name].props;\n      return listeners;\n    })].map(listeners => {\n      const map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(type => type === e.type).map(type => map === null || map === void 0 ? void 0 : map[type]) : undefined;\n    }))\n    // We don't want same listener to be called multiple times for same event\n    // So we remove any duplicate functions from the array\n    .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n    listeners.forEach(listener => listener === null || listener === void 0 ? void 0 : listener(e));\n  });\n  useFocusEvents({\n    state,\n    emitter\n  });\n  React.useEffect(() => {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n  }, [emitter, state]);\n  const {\n    listeners: childListeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    },\n    emitter\n  });\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState,\n    setState\n  });\n  const navigation = useNavigationHelpers({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState\n  });\n  const descriptors = useDescriptors({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter\n  });\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors\n  });\n  const NavigationContent = useComponent(children => /*#__PURE__*/React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, /*#__PURE__*/React.createElement(PreventRemoveProvider, null, children)));\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent\n  };\n}\n//# sourceMappingURL=useNavigationBuilder.js.map"]},"metadata":{},"sourceType":"script"}