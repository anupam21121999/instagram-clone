{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TabActions = void 0;\nexports.default = TabRouter;\nvar _nonSecure = require(\"nanoid/non-secure\");\nvar _BaseRouter = _interopRequireDefault(require(\"./BaseRouter\"));\nvar TYPE_ROUTE = 'route';\nvar TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\nexports.TabActions = TabActions;\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n      break;\n  }\n  return history;\n};\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return Object.assign({}, state, {\n    index: index,\n    history: history\n  });\n};\nfunction TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    _ref$backBehavior = _ref.backBehavior,\n    backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;\n  var router = Object.assign({}, _BaseRouter.default, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: name + \"-\" + (0, _nonSecure.nanoid)(),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + (0, _nonSecure.nanoid)(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var _ref6, _ref7;\n      var _state$routes, _state$history;\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList;\n      var state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return Object.assign({}, route, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : name + \"-\" + (0, _nonSecure.nanoid)(),\n          params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_ref6 = state === null || state === void 0 ? void 0 : state.index) != null ? _ref6 : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      var history = (_ref7 = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      })) != null ? _ref7 : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + (0, _nonSecure.nanoid)(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n        routeParamList = _ref4.routeParamList,\n        routeKeyChanges = _ref4.routeKeyChanges;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name && !routeKeyChanges.includes(r.name);\n        }) || {\n          name: name,\n          key: name + \"-\" + (0, _nonSecure.nanoid)(),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return Object.assign({}, state, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList;\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var index = -1;\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(function (route) {\n                return route.key === action.payload.key;\n              });\n            } else {\n              index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name;\n              });\n            }\n            if (index === -1) {\n              return null;\n            }\n            return changeIndex(Object.assign({}, state, {\n              routes: state.routes.map(function (route, i) {\n                if (i !== index) {\n                  return route;\n                }\n                var params;\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n                }\n                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? Object.assign({}, route, {\n                  path: path,\n                  params: params\n                }) : route;\n              })\n            }), index, backBehavior, initialRouteName);\n          }\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n            var previousKey = state.history[state.history.length - 2].key;\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n            if (_index === -1) {\n              return null;\n            }\n            return Object.assign({}, state, {\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n        default:\n          return _BaseRouter.default.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  });\n  return router;\n}","map":{"version":3,"sources":["TabRouter.tsx"],"names":["TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","BaseRouter","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","nanoid","stale","getRehydratedState","partialState","find","r","Math","min","max","length","getStateForRouteNamesChange","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","merge","path","previousKey","slice","shouldActionChangeFocus","actionCreators"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nconst TYPE_ROUTE = 'route';\nexport const TabActions = {\n  jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name,\n        params\n      }\n    };\n  }\n};\nconst getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n  const history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  let initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n  return history;\n};\nconst changeIndex = (state, index, backBehavior, initialRouteName) => {\n  let history;\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n    history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return {\n    ...state,\n    index,\n    history\n  };\n};\nexport default function TabRouter(_ref) {\n  let {\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  } = _ref;\n  const router = {\n    ...BaseRouter,\n    type: 'tab',\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      const routes = routeNames.map(name => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      }));\n      const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n    getRehydratedState(partialState, _ref3) {\n      var _state$routes, _state$history;\n      let {\n        routeNames,\n        routeParamList\n      } = _ref3;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = routeNames.map(name => {\n        const route = state.routes.find(r => r.name === name);\n        return {\n          ...route,\n          name,\n          key: route && route.name === name && route.key ? route.key : `${name}-${nanoid()}`,\n          params: routeParamList[name] !== undefined ? {\n            ...routeParamList[name],\n            ...(route ? route.params : undefined)\n          } : route ? route.params : undefined\n        };\n      });\n      const index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(state === null || state === void 0 ? void 0 : state.index) ?? 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      const history = ((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(it => routes.find(r => r.key === it.key))) ?? [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange(state, _ref4) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref4;\n      const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      });\n      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      let history = state.history.filter(\n      // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n      it => it.type !== 'route' || routes.find(r => r.key === it.key));\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction(state, action, _ref5) {\n      let {\n        routeParamList\n      } = _ref5;\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            let index = -1;\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(route => route.key === action.payload.key);\n            } else {\n              index = state.routes.findIndex(route => route.name === action.payload.name);\n            }\n            if (index === -1) {\n              return null;\n            }\n            return changeIndex({\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n                let params;\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params\n                  } : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...action.payload.params\n                  } : action.payload.params;\n                }\n                const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? {\n                  ...route,\n                  path,\n                  params\n                } : route;\n              })\n            }, index, backBehavior, initialRouteName);\n          }\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n            const previousKey = state.history[state.history.length - 2].key;\n            const index = state.routes.findIndex(route => route.key === previousKey);\n            if (index === -1) {\n              return null;\n            }\n            return {\n              ...state,\n              history: state.history.slice(0, -1),\n              index\n            };\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  };\n  return router;\n}\n//# sourceMappingURL=TabRouter.js.map"]},"metadata":{},"sourceType":"script"}