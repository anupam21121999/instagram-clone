{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getNamedContext;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _global$contexts;\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar contexts = '__react_navigation__elements_contexts';\nglobal[contexts] = (_global$contexts = global[contexts]) != null ? _global$contexts : new Map();\nfunction getNamedContext(name, initialValue) {\n  var context = global[contexts].get(name);\n  if (context) {\n    return context;\n  }\n  context = React.createContext(initialValue);\n  context.displayName = name;\n  global[contexts].set(name, context);\n  return context;\n}","map":{"version":3,"sources":["getNamedContext.tsx"],"names":["contexts","global","Map","getNamedContext","name","initialValue","context","get","React","createContext","displayName","set"],"mappings":";;;;AAAA;AAA8B;AAAA;AAAA;AAE9B,IAAMA,QAAQ,GAAG,uCAAuC;AAOxDC,MAAM,CAACD,QAAQ,CAAC,uBAAGC,MAAM,CAACD,QAAQ,CAAC,+BAAI,IAAIE,GAAG,EAA8B;AAE7D,SAASC,eAAe,CACrCC,IAAY,EACZC,YAAe,EACG;EAClB,IAAIC,OAAO,GAAGL,MAAM,CAACD,QAAQ,CAAC,CAACO,GAAG,CAACH,IAAI,CAAC;EAExC,IAAIE,OAAO,EAAE;IACX,OAAOA,OAAO;EAChB;EAEAA,OAAO,GAAGE,KAAK,CAACC,aAAa,CAAIJ,YAAY,CAAC;EAC9CC,OAAO,CAACI,WAAW,GAAGN,IAAI;EAE1BH,MAAM,CAACD,QAAQ,CAAC,CAACW,GAAG,CAACP,IAAI,EAAEE,OAAO,CAAC;EAEnC,OAAOA,OAAO;AAChB","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nconst contexts = '__react_navigation__elements_contexts';\n// We use a global variable to keep our contexts so that we can reuse same contexts across packages\nglobal[contexts] = global[contexts] ?? new Map();\nexport default function getNamedContext(name, initialValue) {\n  let context = global[contexts].get(name);\n  if (context) {\n    return context;\n  }\n  context = /*#__PURE__*/React.createContext(initialValue);\n  context.displayName = name;\n  global[contexts].set(name, context);\n  return context;\n}\n//# sourceMappingURL=getNamedContext.js.map"]},"metadata":{},"sourceType":"script"}