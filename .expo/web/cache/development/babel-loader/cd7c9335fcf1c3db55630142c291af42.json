{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinkTo;\nvar _core = require(\"@react-navigation/core\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _LinkingContext = _interopRequireDefault(require(\"./LinkingContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useLinkTo() {\n  var navigation = React.useContext(_core.NavigationContainerRefContext);\n  var linking = React.useContext(_LinkingContext.default);\n  var linkTo = React.useCallback(function (to) {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n    if (typeof to !== 'string') {\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n    if (!to.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\" + to + \").\");\n    }\n    var options = linking.options;\n    var state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : (0, _core.getStateFromPath)(to, options === null || options === void 0 ? void 0 : options.config);\n    if (state) {\n      var action = (0, _core.getActionFromState)(state, options === null || options === void 0 ? void 0 : options.config);\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"sources":["useLinkTo.tsx"],"names":["useLinkTo","navigation","React","useContext","NavigationContainerRefContext","linking","LinkingContext","linkTo","useCallback","to","undefined","Error","navigate","screen","params","startsWith","options","state","getStateFromPath","config","action","getActionFromState","dispatch","reset"],"mappings":";;;;;AAAA;AAKA;AAEA;AAA6C;AAAA;AAiB9B,SAASA,SAAS,GAE7B;EACF,IAAMC,UAAU,GAAGC,KAAK,CAACC,UAAU,CAACC,mCAA6B,CAAC;EAClE,IAAMC,OAAO,GAAGH,KAAK,CAACC,UAAU,CAACG,uBAAc,CAAC;EAEhD,IAAMC,MAAM,GAAGL,KAAK,CAACM,WAAW,CAC7BC,UAAAA,EAAiB,EAAK;IACrB,IAAIR,UAAU,KAAKS,SAAS,EAAE;MAC5B,MAAM,IAAIC,KAAK,CACb,kFAAkF,CACnF;IACH;IAEA,IAAI,OAAOF,EAAE,KAAK,QAAQ,EAAE;MAE1BR,UAAU,CAACW,QAAQ,CAACH,EAAE,CAACI,MAAM,EAAEJ,EAAE,CAACK,MAAM,CAAC;MACzC;IACF;IAEA,IAAI,CAACL,EAAE,CAACM,UAAU,CAAC,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIJ,KAAK,oCAAkCF,EAAG,QAAI;IAC1D;IAEA,IAAQO,OAAAA,GAAYX,OAAO,CAAnBW,OAAAA;IAER,IAAMC,KAAK,GAAGD,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,IAAPA,OAAO,CAAEE,gBAAgB,GACnCF,OAAO,CAACE,gBAAgB,CAACT,EAAE,EAAEO,OAAO,CAACG,MAAM,CAAC,GAC5CD,IAAAA,sBAAgB,EAACT,EAAE,EAAEO,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEG,MAAM,CAAC;IAEzC,IAAIF,KAAK,EAAE;MACT,IAAMG,MAAM,GAAGC,IAAAA,wBAAkB,EAACJ,KAAK,EAAED,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEG,MAAM,CAAC;MAEzD,IAAIC,MAAM,KAAKV,SAAS,EAAE;QACxBT,UAAU,CAACqB,QAAQ,CAACF,MAAM,CAAC;MAC7B,CAAC,MAAM;QACLnB,UAAU,CAACsB,KAAK,CAACN,KAAK,CAAC;MACzB;IACF,CAAC,MAAM;MACL,MAAM,IAAIN,KAAK,CAAC,iDAAiD,CAAC;IACpE;EACF,CAAC,EACD,CAACN,OAAO,EAAEJ,UAAU,CAAC,CACtB;EAED,OAAOM,MAAM;AACf","sourceRoot":"../../src","sourcesContent":["import { getActionFromState, getStateFromPath, NavigationContainerRefContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from './LinkingContext';\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n  const linkTo = React.useCallback(to => {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n    if (typeof to !== 'string') {\n      // @ts-expect-error: This is fine\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n    if (!to.startsWith('/')) {\n      throw new Error(`The path must start with '/' (${to}).`);\n    }\n    const {\n      options\n    } = linking;\n    const state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : getStateFromPath(to, options === null || options === void 0 ? void 0 : options.config);\n    if (state) {\n      const action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}\n//# sourceMappingURL=useLinkTo.js.map"]},"metadata":{},"sourceType":"script"}